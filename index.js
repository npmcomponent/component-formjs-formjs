// Generated by CoffeeScript 1.6.1
(function() {
  var FormJS,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  FormJS = (function() {

    FormJS.types = {};

    FormJS.used_ids = [];

    function FormJS(obj, target) {
      if (obj._method) {
        obj._type = 'form';
      }
      this.config = obj;
      this.dom = this.render(obj);
      this.dom.addClass('formjs-root');
      this.dom.find('*').data('form-config', obj);
      this.config = obj;
      target && this.dom.appendTo(target);
    }

    FormJS.prototype._filter = function(obj, match) {
      var key, ret, val;
      ret = {};
      for (key in obj) {
        val = obj[key];
        if (key.match(match)) {
          ret[key] = val;
        }
      }
      return ret;
    };

    FormJS.prototype.getAttributes = function(obj) {
      return this._filter(obj, /^_/);
    };

    FormJS.prototype.getChildren = function(obj) {
      var child, children, name;
      children = this._filter(obj, /^[a-z0-9]/i);
      for (name in children) {
        child = children[name];
        children[name]._parent = obj;
        children[name]._name = child._name || name;
      }
      return children;
    };

    FormJS.prototype.render = function(obj) {
      var children, element, name, val;
      element = this._render(obj);
      if (obj._nowrap !== true) {
        element = this.label(this._wrap(element, obj), obj);
      }
      children = this.getChildren(obj);
      for (name in children) {
        val = children[name];
        this.render(val).appendTo(val._target || element);
      }
      return element;
    };

    FormJS.prototype._render = function(obj, type_override) {
      var fn, type;
      if (type_override == null) {
        type_override = null;
      }
      type = type_override || obj._type;
      fn = FormJS.types[type] || FormJS.types["default"];
      return fn.call(this, obj);
    };

    FormJS.prototype._generate_id = function(obj) {
      var id, ids;
      if (!obj._id && obj._name) {
        id = "form-" + obj._name;
        ids = FormJS.used_ids;
        while (__indexOf.call(FormJS.used_ids, id) >= 0) {
          id = "form-" + obj._name + "-" + (Math.floor(Math.random() * 500));
        }
        FormJS.used_ids.push(id);
        return obj._id = id;
      }
    };

    FormJS.prototype.label = function(ele, obj) {
      var method, o, _ref;
      if (obj._description) {
        ele.append(this._render({
          _type: 'description',
          _description: obj._description
        }));
      }
      if (obj._label) {
        method = (obj._label_position === 'after' ? 'append' : 'prepend');
        this._generate_id(obj);
        o = obj._label;
        if (typeof obj._label !== 'object') {
          o = {
            _label: obj._label
          };
        }
        o._type = 'label';
        if ((_ref = o._for) == null) {
          o._for = obj._id;
        }
        ele[method](this._render(o));
      }
      return ele;
    };

    FormJS.prototype.populate = function(data, target) {
      var checked, conf, config, ele, element, elements, get_names, k, multi, name, names, v, val, _i, _len, _ref, _results;
      if (target == null) {
        target = this.dom;
      }
      elements = {};
      _ref = target.find('[name]');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ele = _ref[_i];
        elements[$(ele).attr('name')] = $(ele);
      }
      get_names = function(value, key, names) {
        var k, v;
        if (key == null) {
          key = '';
        }
        if (names == null) {
          names = {};
        }
        if (typeof value === 'object') {
          for (k in value) {
            v = value[k];
            names = get_names(v, key + '[' + k + ']', names);
          }
        } else {
          names[key] = value;
        }
        return names;
      };
      _results = [];
      for (k in data) {
        v = data[k];
        names = get_names(v, k);
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (name in names) {
            val = names[name];
            if (!(element = this.dom.find('[name="' + name + '"]'))) {
              continue;
            }
            config = element.data('item-config');
            if ((multi = element.parents('.form-multiple')).length > 0) {
              conf = multi.data('item-config');
              if (conf._populate_callback) {
                if (conf._populate_callback(name, val, element, conf, data)) {
                  continue;
                }
              }
            }
            if (element.attr('type') === 'checkbox') {
              checked = (val.toUpperCase && val.length) || (val.toFixed && !!(parseFloat(val))) || 1;
              if (checked) {
                _results1.push(element.attr('checked', 'checked'));
              } else {
                _results1.push(element.removeAttr('checked'));
              }
            } else if (element.attr('type') === 'radio') {
              _results1.push(this.form.find('[name="' + (name = '"][value=' + val + ']')).removeAttr('checked').filter('[value=' + val + ']').attr('checked', 'checked'));
            } else {
              _results1.push(element != null ? element.val(val) : void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    FormJS.prototype.getValues = function(target, debug) {
      var config, ele, find, i, k, level, levels, match, name, reg, tar, type, val, values, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      if (debug == null) {
        debug = false;
      }
      values = {};
      target = $(target || this.dom);
      _ref = target.find('[name]');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ele = _ref[_i];
        ele = jQuery(ele);
        name = ele.attr('name');
        type = ele.attr('type');
        if (type === 'submit' || type === 'reset' || type === 'cancel') {
          continue;
        }
        config = ele.parent().find('input, select, textarea').andSelf().data('item-config');
        val = (config && (((_ref1 = config._value_callback) != null ? _ref1.call : void 0) != null) && config._value_callback.call(ele, config)) || ele.attr('data-value') || ele.val();
        if (!val) {
          continue;
        }
        if (type === 'radio' || type === 'checkbox') {
          val = target.find('[name="' + name + '"]:checked').val();
          if (val === 'undefined' || typeof val === 'undefined') {
            val = false;
          }
        }
        levels = ['^([^\\[]+)', '\\[([0-9]+|[^\\]]+)\\]', '\\[([0-9]+|[^\\]]+)\\]', '\\[([0-9]+|[^\\]]+)\\]'];
        reg = '';
        i = 0;
        tar = values;
        for (_j = 0, _len1 = levels.length; _j < _len1; _j++) {
          level = levels[_j];
          i++;
          reg += level;
          match = name.match(reg);
          if (match && (match[i] != null)) {
            k = match[i];
            type = (isNaN(parseInt(match[i])) ? {} : []);
            if (i === 1) {
              find = 'values.' + k;
              if ((_ref2 = values[k]) == null) {
                values[k] = type.constructor();
              }
            } else {
              eval(find + ' = ' + find + ' && ' + find + '.constructor == type.constructor ? ' + find + ' : type.constructor()');
              find += '["' + k + '"]';
            }
          }
        }
        eval(find + ' = ' + JSON.stringify(val));
      }
      return values;
    };

    FormJS.prototype.applyAttributes = function(ele, _attrs, skip) {
      var attrs, cb, ev, events, k, v, _ref,
        _this = this;
      if (skip == null) {
        skip = [];
      }
      if (!_attrs) {
        throw 'No attrs';
      }
      this._generate_id(_attrs);
      ele.data('item-config', _attrs);
      attrs = ele._attributes || {};
      skip = skip.concat(['_nowrap', '_attributes', '_parent', '_events', '_description', '_text', '_label', '_options']);
      _ref = this.getAttributes(_attrs);
      for (k in _ref) {
        v = _ref[k];
        if (!(__indexOf.call(skip, k) < 0 && typeof v !== 'function')) {
          continue;
        }
        k = k.substr(1);
        if (attrs[k] == null) {
          attrs[k] = v;
        }
      }
      ele.attr(attrs);
      if (events = _attrs._events) {
        for (ev in events) {
          cb = events[ev];
          if (ev) {
            (function(ev, cb) {
              if (cb.forEach == null) {
                cb = [cb];
              }
              if (ev === 'submit' && events.validate) {
                cb.unshift(events.validate);
              }
              if (ev === 'validate') {
                if (!events.submit) {
                  ev = 'submit';
                } else {
                  return;
                }
              }
              if (ele[ev]) {
                return ele[ev](function(e) {
                  var _cb, _i, _len;
                  for (_i = 0, _len = cb.length; _i < _len; _i++) {
                    _cb = cb[_i];
                    if (!_cb.call(_this, _this.getValues(), e)) {
                      return false;
                    }
                  }
                });
              }
            })(ev, cb);
          }
        }
      }
      return ele;
    };

    FormJS.prototype._wrap = function(ele, obj) {
      return jQuery(ele).wrap('<div />').parent().addClass('form-row').addClass(obj._type && 'form-' + obj._type);
    };

    FormJS.registerType = FormJS.prototype.registerType = function(type, callback) {
      return FormJS.types[type] = callback;
    };

    return FormJS;

  })();

  require('./elements/base.js')(FormJS);

  require('./elements/buttons.js')(FormJS);

  require('./elements/options.js')(FormJS);

  require('./elements/select.js')(FormJS);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = FormJS;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.FormJS = FormJS;
  }

}).call(this);
